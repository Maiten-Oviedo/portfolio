---
import Badge from './Badge.astro'

interface Experiencie {
  id: number
  company: string
  position: string
  period: string
  description: string
  technologies: string[]
  achievements: string[]
  url: string
}

interface Props {
  exp: Experiencie
  index: number
}

const { exp, index } = Astro.props
---

<li
  class="flex-1 cursor-pointer md:min-w-[350px] max-w-[600px] md:h-[500px] h-auto bg-gradient-to-tr from-[#040914] via-[#080f1f] to-[#030b1d] border border-white/10 rounded-2xl p-8 backdrop-blur-sm transition-all duration-300 relative overflow-hidden group hover:-translate-y-2 hover:border-primary/30 hover:shadow-2xl hover:shadow-primary/10 opacity-0 translate-y-8"
  data-index={index}
  data-animate="fade-in-up"
>
  <a href={exp.url} target="_blank" rel="noopener noreferrer"
    ><div
      class="absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-primary to-primary/60 scale-x-0 group-hover:scale-x-100 transition-transform duration-300 origin-left"
    >
    </div>
    <div class="flex justify-between items-start mb-6">
      <div class="flex-1">
        <h3 class="text-2xl font-semibold text-white mb-2">
          {exp.company}
        </h3>
        <p class="text-lg text-primary mb-1">{exp.position}</p>
        <span class="text-sm text-zinc-400">{exp.period}</span>
      </div>
      <div class="text-3xl font-bold text-white/10 leading-none">
        {String(exp.id).padStart(2, '0')}
      </div>
    </div>
    <div class="space-y-6">
      <p class="text-zinc-300 leading-relaxed">{exp.description}</p>

      <div>
        <h4
          class="text-xs font-semibold text-white mb-3 uppercase tracking-wider"
        >
          Tecnologías
        </h4>
        <div class="flex flex-wrap gap-2 mb-6">
          {exp.technologies.map(tech => <Badge>{tech}</Badge>)}
        </div>
      </div>

      <div>
        <h4
          class="text-xs font-semibold text-white mb-3 uppercase tracking-wider"
        >
          Logros destacados
        </h4>
        <ul class="space-y-2">
          {
            exp.achievements.map(achievement => (
              <li class="text-zinc-300 text-sm pl-4 relative">
                <span class="absolute left-0 text-primary font-bold">→</span>
                {achievement}
              </li>
            ))
          }
        </ul>
      </div>
    </div></a
  >
</li>

<script>
  class ExperienceAnimator {
    observer: IntersectionObserver = new IntersectionObserver(() => {})

    constructor() {
      this.init()
    }

    init() {
      this.observer = new IntersectionObserver(
        entries => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              this.animateCard(entry.target)
              this.observer.unobserve(entry.target)
            }
          })
        },
        {
          threshold: 0.1,
          rootMargin: '0px 0px -50px 0px',
        }
      )

      // Observe all experience cards
      const cards = document.querySelectorAll('[data-animate="fade-in-up"]')
      cards.forEach(card => {
        this.observer.observe(card)
      })
    }

    animateCard(card: Element) {
      const index = parseInt((card as HTMLElement).dataset.index || '0')
      const delay = index * 150 // Staggered animation delay

      setTimeout(() => {
        card.classList.remove('opacity-0', 'translate-y-8')
        card.classList.add('opacity-100', 'translate-y-0')
      }, delay)
    }

    cleanup() {
      if (this.observer) {
        this.observer.disconnect()
      }
    }
  }

  // Initialize animations when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ExperienceAnimator()
  })

  // Cleanup on page unload
  window.addEventListener('beforeunload', () => {
    // Cleanup will be handled automatically by garbage collection
  })
</script>

<style>
  /* Added smooth transitions for entrance animations */
  li[data-animate='fade-in-up'] {
    transition:
      opacity 0.6s cubic-bezier(0.4, 0, 0.2, 1),
      transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Respect user's motion preferences */
  @media (prefers-reduced-motion: reduce) {
    li[data-animate='fade-in-up'] {
      transition: none;
      opacity: 1 !important;
      transform: none !important;
    }
  }
</style>
